{"data":{"referenceCode":"const dotenv = require('dotenv');\r\ndotenv.config();\r\n\r\nconst express = require('express');\r\nconst app = express();\r\nconst port = process.env.PORT || 3000;\r\nconst timestamp = require('log-timestamp');\r\nconst bodyParser = require('body-parser');\r\nconst bcrypt = require('bcrypt');\r\n\r\napp.use(bodyParser.json()); // to support JSON-encoded bodies\r\napp.use(bodyParser.urlencoded({ // to support URL-encoded bodies\r\n    extended: true\r\n}));\r\n\r\nconst { Client } = require('pg');\r\nconst connectionString = 'postgres://mlgbrjxqombdxt:9e8239afd7e3387f3d3b60a8be19dd7c21f2494ff0814b1970f760199db5c05f@ec2-107-20-198-176.compute-1.amazonaws.com:5432/da5spegutq022d';\r\nconst client = new Client({\r\n    connectionString: connectionString,\r\n    ssl: true\r\n});\r\n\r\n//await connection\r\nclient.connect();\r\n\r\n//EJS view engine (think of it sort of like PHP but it doesnt make you want the sweet release of death)\r\napp.set('view engine', 'ejs');\r\n\r\n//sets staticContent folder as the root for all static content (ie .../staticContent/app.js is accessed as ./app.js)\r\napp.use(express.static('staticContent'));\r\n\r\napp.use(express.json());\r\napp.use(express.urlencoded({ extended: false }));\r\n\r\n//when a GET request is made for the root we render the index.ejs page passing the API key in to be rendered as an HTML string response\r\napp.get('/', (req, res) => res.render('index', { apikey: \"\" + process.env.API_KEY, page: \"map\" }, function(err, html) {\r\n    res.send(html);\r\n}));\r\n\r\napp.get('/favorites', (req, res) => res.render('favs', { page: \"fav\" }, function(err, html) {\r\n    res.send(html);\r\n}));\r\n\r\n//add to favorites return\r\napp.post('/favorites', (req, res) => res.render('favs', { page: \"fav\" }, function(err, html) {\r\n    res.send(html);\r\n}));\r\n\r\napp.get('/login', (req, res) => res.render('login', { page: \"login\" }, function(err, html) {\r\n    res.send(html);\r\n}));\r\n\r\napp.get('/addfav', (req, res) => res.render('addFav', { page: \"addFav\" }, function(err, html) {\r\n    res.send(html);\r\n}));\r\n\r\napp.get('/settings', (req, res) => res.render('settings', { page: \"settings\" }, function(err, html) {\r\n    res.send(html);\r\n}));\r\n\r\napp.get('/about', (req, res) => res.render('about', { page: \"about\" }, function(err, html) {\r\n    res.send(html);\r\n}));\r\n\r\napp.post('/doLogin', async(req, res) => {\r\n    //get form data\r\n    const user = req.body.lguser;\r\n    const pw = req.body.lgpw;\r\n\r\n    //DB query for username and hashed password here\r\n    const loggingin = {\r\n        text: \"SELECT username, password FROM users WHERE username = $1\",\r\n        values: [user]\r\n    };\r\n\r\n    const { rows } = await client.query(loggingin.text, loggingin.values);\r\n\r\n    try {\r\n        if (rows.length == 0)\r\n            return res.redirect('/login?error=badcredentials');\r\n        if (bcrypt.compareSync(pw, rows[0].password)) {\r\n            //login success\r\n            const guid = Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15); //random string\r\n            //store username and guid in DB here\r\n            const addToSession = {\r\n                text: \"SELECT startSession($1, $2)\",\r\n                values: [user, guid]\r\n            };\r\n            const sessRes = await client.query(addToSession);\r\n            console.log(\"Login success!\");\r\n            const dataStr = `{\"username\":\"${user}\",\"uid\":\"${guid}\"}`;\r\n            res.render('handlingLogin', { data: dataStr }, function(err, html) {\r\n                res.send(html);\r\n            });\r\n        } else {\r\n            return res.redirect('/login?error=badcredentials');\r\n        }\r\n    } catch (e) {\r\n        return res.redirect('/login?error=badcredentials');\r\n    }\r\n});\r\n\r\napp.post('/doSignUp', async(req, res) => {\r\n    const user = req.body.suuser;\r\n\r\n    //TODO: add db query to confirm username isnt taken\r\n    //COMPLETED ^ BUT WITHOUT TEST\r\n\r\n    const question = \"SELECT username, password FROM users WHERE username = $1\";\r\n    const value = [user];\r\n    const output = await client.query(question, value);\r\n\r\n    //This if statement only works if the username isn't taken.\r\n    if (output.rowCount == 0) {\r\n        const pw = req.body.supw;\r\n        const pwc = req.body.supwc;\r\n        console.log(\"Pass: \" + pw + \"\\nConf: \" + pwc);\r\n        if (pw == pwc) {\r\n            const pwHash = bcrypt.hashSync(req.body.supw, 10);\r\n            //store in db\r\n            //login stuff below\r\n            const guid = Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15); //random string\r\n            const insertion = {\r\n                text: \"INSERT INTO users(username, password) VALUES ($1, $2)\",\r\n                values: [user, pwHash]\r\n            };\r\n            const addToSession = {\r\n                text: \"SELECT startSession($1, $2)\",\r\n                values: [user, guid]\r\n            };\r\n            const insRes = await client.query(insertion);\r\n            const sessRes = await client.query(addToSession);\r\n            console.log(\"Signup and Login success!\");\r\n            const dataStr = `{\"username\":\"${user}\",\"uid\":\"${guid}\"}`;\r\n            res.render('handlingLogin', { data: dataStr }, function(err, html) {\r\n                res.send(html);\r\n            });\r\n        } else res.redirect('/login');\r\n\r\n        //Test stuff. This prints out all the rows.\r\n        // const data = res.rows\r\n        // data.forEach(row => console.log(row))\r\n    } else res.redirect('/login');\r\n});\r\n\r\n//API to check for valid login\r\napp.post('/validate', (req, res) => {\r\n    const inDatabase = false;\r\n    const guid = req.body.guid;\r\n    //check if it is in loggred in database\r\n    if (inDatabase) {\r\n        res.send(`{\"login\": true}`); //logged in confirmation\r\n    } else res.send(`{\"login\": false}`); //not logged in\r\n});\r\n\r\napp.get('/places.json', (req, response) => {\r\n    const out = client.query('SELECT * FROM locations')\r\n        .then(res => res.rows)\r\n        .then(row => response.send(row));\r\n});\r\n\r\n/*\r\n * TODO: Use GUID as query param\r\n */\r\napp.get('/datafile.json', (req, response) => {\r\n    console.log(\"id is \", req.query.id);\r\n    const out = client.query({\r\n            rowMode: 'array',\r\n            text: 'SELECT getfavloc($1);',\r\n            values: [req.query.id]\r\n        })\r\n        .then(res => response.send(JSON.parse(res.rows[0])));\r\n});\r\n\r\napp.get('/datafileWithID.json', (req, response) => {\r\n    console.log(\"id is \", req.query.id);\r\n    const out = client.query({\r\n            rowMode: 'array',\r\n            text: 'SELECT getfavloc2($1);',\r\n            values: [req.query.id]\r\n        })\r\n        .then(res => response.send(JSON.parse(res.rows[0])));\r\n});\r\n\r\n/*\r\napp.get('/categories.json', (req, response) => {\r\n    const out = client.query({\r\n            rowMode: 'array',\r\n            text: 'SELECT DISTINCT \"category\" FROM \"favoriteLocations\" WHERE \"userId\" = ($1);',\r\n            values: ['1']\r\n        })\r\n        .then(res => response.send(res.rows));\r\n});\r\n*/\r\n\r\napp.post('/favorites-add', (req, response) => {\r\n    const out = client.query({\r\n            rowMode: 'array',\r\n            text: 'SELECT addPlace($1, $2, $3);',\r\n            values: [req.body.id, req.body.place, req.body.category]\r\n        })\r\n        .catch(e => console.log(e))\r\n        .finally(response.redirect('/favorites'));\r\n});\r\n\r\napp.post('/favorites-remove', (req, response) => {\r\n    const out = client.query({\r\n            rowMode: 'array',\r\n            text: 'SELECT removeFavLoc3($1, $2, $3);',\r\n            values: [req.body.id, req.body.location, req.body.category]\r\n        })\r\n        .catch(e => console.log(e))\r\n        .finally(response.redirect('/favorites'));\r\n});\r\n\r\n//start the server\r\napp.listen(port, () => console.log(`Listening on port ${port}!`));","lang":"js"},"slides":[{"title":"Navigate-a-Bull Server Overview","content":"<p>This is Navigate-a-Bull's server!<p> <h2>It's sick AF</h2>","showCodeFrom":1},{"title":"The Libraries","content":"Navigate-a-Bull uses many libraries such as <ul><li>Express</li><li>Node-Postgress</li><li>Bcrypt</li><ul>","showCodeFrom":1},{"title":"Log In functionality","content":"This slide shows how the presentation scrolls code and does not explicitly need html markup for the code, this is all literally a string","showCodeFrom":65},{"title":"Log In functionality","content":"Duplicating a slide and only changing the content and code position shows a different part of the code","showCodeFrom":103},{"title":"Code goes up as well","content":"<h2>Its fucking sick</h2><h3>This is a different heading style, you have 6.</h3><p>Stuff can also be <b>bolder</b> for any style too</p>","showCodeFrom":36}]}